struct lista{
    int info;
    char inf;
    lista* urm;
    lista*prim;
    lista*ultim;
    lista*varf;
}nod;


void push(lista *&varf, char element)
{
lista *Stiva;
Stiva=new lista;
Stiva->inf=element;
Stiva->urm = varf;
varf=Stiva;
}

void pop(lista *&varf )
{
    lista *Stiva=varf;
    varf=varf->urm;
    delete Stiva;

}

char top(lista *&varf)
{
    char element=varf->inf;
    lista *Stiva=varf;
    return element;
}

void eliminare(lista *&Coada)
{  lista *q,*r;
    q=new lista;
    r=new lista;
    q = q->urm;
    delete q;
    if(!Coada)
        r=NULL;

 }

void inserare(lista *&prim, lista *&ultim, int element)
{
    lista *Coada;
    Coada=new lista;
    Coada->info=element;
    Coada->urm=NULL;
    if(ultim)
        ultim->urm=Coada;
    else
        prim=Coada;
    ultim=Coada;

}
int citeste(lista *&prim)
{
    int element=prim->info;
    lista *Coada=prim;
    return element;
}


bool esteVidaS(lista *&Stiva)//stiva
{
return top(Stiva);
}

bool esteVidaC(lista *&Coada)//coada
{
    if(Coada->prim==NULL&&Coada->ultim==NULL)
    return 1;
else
    return 0;
}

void coada_vida(lista *&Coada)
{
    Coada->prim=NULL;
    Coada->ultim=NULL;
}

void stiva_vida(lista *&Stiva)
{
    Stiva->varf=NULL;
}


void transformaredininfixinpostifx(lista *&stiva_postfixata,lista *&coada_infixata, lista *Stiva)
{
    int i,nr=0;
    char sirdetransfer[NMAX];
    char operatori[]="+-*/^x()sclt";
    bool ok;
    while(esteVidaC(coada_infixata)==0)
    {
        ok=0;
        strcpy(sirdetransfer,(char*)citeste(coada_infixata));
        eliminare(coada_infixata);
        for(i=0;ok!=0&&operatori[i];i++)
            if(strchr(sirdetransfer,operatori[i]))
                ok=1;
        if(ok==0)
            push(stiva_postfixata,sirdetransfer[nr]);
        if(ok!=0)
            {
                if(strchr(sirdetransfer,')'))
                {
                    while(strchr(sirdetransfer,'('))
                    {
                        push(stiva_postfixata,top(Stiva));
                        pop(Stiva);
                    }
                    pop(Stiva);
                }
            }
            else {
                     while(esteVidaS(Stiva)==0&&top(Stiva)=='('&&prioritatecaracter((char*)top(Stiva))>=prioritatecaracter((char*)sirdetransfer[nr]))
                        {
                            push(stiva_postfixata,top(Stiva));
                            pop(Stiva);
                        }
                    push(Stiva,sirdetransfer[nr]);
                  }

        nr++;
    }
}
